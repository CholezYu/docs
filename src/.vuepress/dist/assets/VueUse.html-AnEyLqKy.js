import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t}from"./app-tBE2QGGd.js";const p={},e=t(`<h2 id="usestorage" tabindex="-1"><a class="header-anchor" href="#usestorage" aria-hidden="true">#</a> useStorage</h2><p>响应式操作 storage。它还有两个语法糖，<code>useLocalStorage</code> 和 <code>useSessionStorage</code>。</p><p>我们可以在 Pinia 中使用 <code>useLocalStorage</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useLocalStorage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vueuse/core&quot;</span>

<span class="token comment">// TOKEN</span>
<span class="token comment">// 这里建议默认值为 null 而不是 &quot;&quot;</span>
<span class="token comment">// 否则 storage 会设置一条值为 &quot;&quot; 的数据。如果是 null 的话，storage 不会设置任何数据</span>
<span class="token keyword">const</span> userToken <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useLocalStorage</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">STORAGE_KEY</span><span class="token punctuation">.</span><span class="token constant">TOKEN</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>

<span class="token comment">// USER_INFO</span>
<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useLocalStorage</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserInfo <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">STORAGE_KEY</span><span class="token punctuation">.</span><span class="token constant">USER_INFO</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对象类型的 storage 需要自定义序列化</span>
  serializer<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token function-variable function">write</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> UserInfo <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 如果默认值为 null，需要使用下面这种写法</span>
  <span class="token comment">// 但是测试发现使用上面的方式也行</span>
  <span class="token comment">// serializer: StorageSerializers.object</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 登录</span>
<span class="token keyword">const</span> <span class="token function-variable function">userLogin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> LoginParams<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">apiLogin</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">RESPONSE_CODE</span><span class="token punctuation">.</span><span class="token constant">LOGIN_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">userReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    userToken<span class="token punctuation">.</span>value <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token <span class="token comment">// 自动设置 storage</span>
    storage<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">STORAGE_KEY</span><span class="token punctuation">.</span><span class="token constant">USER_INFO</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// 也可以手动设置 storage</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取用户信息</span>
<span class="token keyword">const</span> <span class="token function-variable function">getUserInfo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">apiUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">RESPONSE_CODE</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userInfo<span class="token punctuation">.</span>value <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data <span class="token comment">// 自动设置 storage</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 登出</span>
<span class="token keyword">const</span> <span class="token function-variable function">userLogout</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">apiLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">userReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 清空</span>
<span class="token keyword">const</span> <span class="token function-variable function">userReset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  userToken<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 自动清除 storage</span>
  userInfo<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 自动清除 storage</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后在组件中使用 Pinia 时，就不需要再关注是否需要从 storage 中存取数据了。</p>`,5),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","VueUse.html.vue"]]);export{k as default};

import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as p}from"./app-mJH2tz0N.js";const t={},e=p(`<h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><h3 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h3><ul><li><p>事件循环是浏览器用于调度异步任务的机制：</p><ul><li><p>浏览器主要的进程有：浏览器进程、网络进程、渲染进程。</p></li><li><p>渲染进程中又包含了多个线程：GUI 渲染线程、JS 引擎线程、事件触发线程、计时线程、渲染主线程。</p></li></ul></li><li><p>事件循环具体是什么？</p><p>浏览器的渲染进程启动后，会开启一个渲染主线程，它会进入一个无限循环，每一次循环都会检查任务队列中是否有任务存在。如果有，就取出第一个任务执行，执行完进入下一次循环；如果没有，则进入休眠状态。其他线程可以随时向任务队列添加任务：比如说计时线程，计时器时间到了，往里面加任务；比如说交互线程，监听到了用户点击，往里面加任务。加任务的时候一定是把它加到任务队列的末尾，先来的先执行，后来的排队。在添加新任务时，如果主线程处于休眠状态，会将其唤醒，继续循环执行任务。这个过程叫做事件循环。</p></li><li><p>事件循环是实现异步的方式，那么异步又是什么？</p><p>JS 运行在浏览器的渲染主线程中，而渲染主线程只有一个，所以 JS 是单线程执行的。这是为了保证页面渲染的可靠性和一致性，防止多个线程同时修改 DOM 引起的问题。而渲染主线程需要做很多工作，比如解析 HTML、解析 CSS、计算样式、布局、执行全局 JS 代码。而在代码执行的过程中，会遇到一些无法立即处理的任务，比如：计时器回调、网络请求完成后需要执行的任务、用户操作后需要执行的任务。如果使用同步的方式，让渲染主线程等待这些任务的执行，就会导致主线程长期处于阻塞状态，从而导致任务队列中很多其他任务无法被执行。这样一来，一方面会导致主线程白白地消耗时间，另一方面也会导致页面无法及时更新，给用户造成卡死现象。而渲染主线程承担着极其重要的工作，无论如何都不能阻塞，所以浏览器采用异步的方式来解决这个问题。当某些任务发生时，比如计时器、网络请求、事件监听，主线程会将任务交给其他线程去处理。当其他线程完成时，会将事先传递的回调函数包装成任务，加入到任务队列的末尾排队，等待主线程调度。在这种异步模式下，浏览器永不阻塞，从而最大程度地保证了单线程的流畅运行。</p></li><li><p>JS 为什么会阻塞页面渲染？</p><p>在浏览器中，GUI 线程负责解析 HTML、CSS 并进行页面的绘制，JS 引擎线程负责执行 JS 代码。由于 GUI 渲染和 JS 执行共享同一个渲染主线程，所以它们是互斥的。当 GUI 渲染线程准备渲染页面时，如果遇到需要执行 JS 的情况，会等待 JS 引擎线程执行完毕后再继续渲染。这期间，渲染主线程处于阻塞状态，页面渲染暂停。</p></li><li><p>任务队列的优先级：</p><p>任务是没有优先级的，在任务队列中先进先出。但是任务队列是有优先级的。根据 W3C 最新解释：每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。浏览器必须准备一个微队列，微队列中的任务优先所有其他任务执行。随着浏览器复杂度急剧提升，W3C 不再使用宏队列的说法。在目前谷歌浏览器的实现中，至少包含了：延时队列，用于存放计时器的回调任务；交互队列，用于存放用户操作后产生的任务；网络队列，用于存放网络请求完成后产生的任务；微队列，也称为 vip 队列，优先级最高。在延时队列、交互队列、网络队列中，交互队列的优先级更高，因为浏览器认为用户的交互更加重要。</p></li><li><p>JS 中的计时器能精确计时吗？</p><p>不能，因为计时器回调需要在任务队列中排队，而在它前面可能有其他任务正在排队，所以需要等待它前面的任务执行完，所以还应该算上它前面那些任务的执行时间。而且，按照 W3C 标准，浏览器实现计时器时，如果嵌套层级超过 5 层，会带有 4 毫秒的最少时间，如果计时时间少于 4 毫秒时，会带来偏差。我们用的计时器函数例如 setTimeout 和 setInterval 其实最终调用的是操作系统的函数，而操作系统的计时函数本身就有少量偏差，并且不同操作系统，它的实现不一样，Windows 和 Mac 就不一样，谷歌浏览器实际上是针对 Windows 和 Mac 都做了不同的实现，调的是不同的函数，所以 JS 的计时器就携带了这些偏差。</p></li><li><p>总结：</p><p>单线程是异步产生的原因。事件循环是异步的实现方式。异步的实现可以解决主线程阻塞的问题，有了异步之后，线程永不阻塞。</p></li></ul><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h2><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h3><ul><li><p>HTTP 是超文本传输协议，是浏览器与服务器通信的协议。</p></li><li><p>协议通信的内容称为报文。浏览器发送给服务器的报文称为请求报文，服务器返回给浏览器的报文称为响应报文。</p></li><li><p>请求报文：</p><ul><li><p>由请求首行、请求头、空行、请求体组成。</p></li><li><p>请求首行包括请求方式、请求地址、协议版本。</p></li><li><p>请求头有：</p><p>Accept: 浏览器可以接收的数据类型</p><p>User-Agent: 浏览器类型</p><p>Content-Type: 请求体的数据类型</p><p>Referer: 请求来源地址</p><p>Cookie: 可以携带数据发送给服务器</p></li><li><p>空行用于分隔请求头和请求体。</p></li><li><p>请求体就是浏览器携带的数据。一般用于 Post 请求，Get 请求的请求体为空。</p></li></ul></li><li><p>响应报文：</p><ul><li><p>由响应首行、响应头、空行、响应体组成。</p></li><li><p>响应首行包括协议版本、响应状态码、状态码信息。</p></li><li><p>响应头有：</p><p>Access-Control-Allow-Origin: 允许跨域的地址</p><p>Content-Type: 响应体的数据类型</p><p>Cache-Control: 强制缓存字段</p><p>Etag / Last-Modifined: 协商缓存字段</p></li><li><p>空行用于分隔响应头和响应体。</p></li><li><p>响应体就是服务器返回的数据。</p></li></ul></li><li><p>响应状态码：</p><ul><li><p>1xx: 请求正在处理</p></li><li><p>2xx: 请求处理成功</p><p>200: 请求成功</p></li><li><p>3xx: 请求重定向，需要进一步处理</p><p>301: 永久重定向</p><p>302: 临时重定向</p><p>304: 重定向到浏览器缓存</p></li><li><p>4xx: 客户端错误</p><p>400: 请求出现语法错误</p><p>401: 未认证、未授权</p><p>403: 拒绝访问</p><p>404: 找不到资源</p><p>407: token 无效</p></li><li><p>5xx: 服务器错误</p><p>500: 服务器内部错误</p><p>503: 服务器停机维护或已超载，无法处理请求</p></li></ul></li></ul><h3 id="get-和-post" tabindex="-1"><a class="header-anchor" href="#get-和-post" aria-hidden="true">#</a> Get 和 Post</h3><ul><li><p>根据规范：Get 用于查询数据；Post 用于添加数据。</p></li><li><p>Get 将数据携带在 url 中发送请求；Post 将数据携带在请求体中发送请求。</p></li><li><p>Get 携带数据大小有限，因为 url 有长度限制；Post 携带数据大小没有限制。</p></li><li><p>Get 有缓存；Post 没有。</p></li></ul><h3 id="强制缓存和协商缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存和协商缓存" aria-hidden="true">#</a> 强制缓存和协商缓存</h3><ul><li><p>缓存是什么？</p><p>强制缓存和协商缓存是浏览器的两种缓存策略。合理设置缓存可以减少不必要的网络传输，提高网页加载速度。</p></li><li><p>强制缓存：</p><p>浏览器第一次发送请求时，服务器会将强制缓存字段 Cache-Control 或 Expires 携带响应头中，它们分别表示缓存的有效时间和绝对过期时间。告诉浏览器将该资源缓存在本地。浏览器再次请求该资源时，会先检查本地缓存是否有效。如果有效，浏览器直接从缓存中获取资源，而不会向服务器发送请求；如果无效，则进行协商缓存。</p></li><li><p>协商缓存：</p><p>强制缓存失败后，浏览器会携带缓存标识向服务器发送请求，服务器根据缓存标识决定是否使用缓存。当浏览器第一次发送请求时，服务器将协商缓存字段 Etag 和 Last-Modified 携带在响应头返回，它们分别表示文件唯一标识和资源最后修改时间。当浏览器再次请求该资源时，会将 If-None-Match 字段和 If-Modified-Since 字段携带在请求头中，它们的值分别为上次获取资源时的 Etag 和 Last-Modified 值。服务器收到请求后，会将 If-None-Match 与文件唯一标识进行比较，如果相等，说明请求的是同一资源；再将 If-Modified-Since 与资源最后修改时间进行比较，如果时间一致，说明资源未修改，服务器响应 304 状态码，浏览器会直接从缓存获取资源；如果时间不一致，说明资源已修改，服务器会响应 200 状态码，并返回新的资源，并在响应头携带新的强制缓存和协商缓存字段。</p></li><li><p><code>Cache-Control: nocache;</code> 表示不进行强制缓存，强制向服务器发送请求，可能会命中协商缓存。</p></li><li><p><code>Cache-Control: no-store;</code> 禁止所有缓存。</p></li></ul><h3 id="在浏览器地址栏按下回车发生了什么" tabindex="-1"><a class="header-anchor" href="#在浏览器地址栏按下回车发生了什么" aria-hidden="true">#</a> 在浏览器地址栏按下回车发生了什么</h3><ul><li><p>首先解析地址栏中的内容是否合法，如果不合法，就会使用搜索引擎搜索地址栏的内容。</p></li><li><p>然后判断是否进行强制缓存。</p></li><li><p>再进行 DNS 解析，将域名解析为 IP 地址。</p><ul><li><p>判断浏览器是否有 DNS 缓存；</p></li><li><p>判断电脑是否有 DNS 缓存；</p></li><li><p>判断路由器是否有 DNS 缓存；</p></li><li><p>判断网络运营商是否有 DNS 缓存，这个是需要花钱买 DNS 解析服务的；</p></li><li><p>去根域名服务器递归查询 DNS，最终返回 IP 地址。</p></li></ul></li><li><p>再进行 TCP 三次握手，确保通信双方的收发能力正常。</p><ul><li><p>浏览器向服务器发送一个 SYN 请求数据包，确认浏览器的发送能力正常；</p></li><li><p>服务器向浏览器发送 SYN 请求数据包和 ACK 应答数据包，确认服务器的收发能力正常；</p></li><li><p>浏览器向服务器发送一个 ACK 应答数据包，确认浏览器的接收能力正常。</p></li></ul></li><li><p>浏览器将数据以请求报文的形式发送给服务器。</p></li><li><p>服务器将数据以响应报文的形式返回给浏览器。</p></li><li><p>浏览器根据响应数据，解析并渲染页面：</p><ul><li><p>浏览器遇到 html，使用 html 解析器将 html 解析成 DOM 树；</p></li><li><p>浏览器遇到 css，使用 css 解析器将 css 解析成 CSSOM 树；</p></li><li><p>DOM 树和 CSSOM 树结合生成 render 树；</p></li><li><p>浏览器根据 render 树，进行布局和渲染；</p></li><li><p>如果浏览器遇到 js 代码，渲染主线程会处于阻塞状态，页面暂停渲染，等待 JS 引擎线程解析 js 代码；</p></li><li><p>如果 js 修改了 DOM 元素，则重新构建 DOM 树；</p></li><li><p>如果 js 修改了样式，则重新构建 CSSOM 树；</p></li><li><p>DOM 树和 CSSOM 树重新结合生成 render 树；</p></li><li><p>浏览器根据 render 树，重新布局和渲染，这个过程也叫作重绘重排；</p></li><li><p>重绘不一定导致重排，但是重排一定会导致重绘；</p></li><li><p>一般，元素的样式、尺寸、位置、布局的改变，或者元素的增加与删除，会引起重绘重排；</p></li><li><p>我们可以使用平移代替偏移量，通过防抖节流控制事件的触发频率等方式，来减少重绘重排。</p></li></ul></li><li><p>最后进行 TCP 四次挥手，彻底断开浏览器和服务器的连接。</p><ul><li><p>浏览器向服务器发送 FIN 数据包请求断开连接；</p></li><li><p>服务器向浏览器发送 ACK 应答数据包表示收到并同意断开连接请求；</p></li><li><p>服务器等待数据处理完毕，向浏览器发送 FIN 数据包请求断开连接；</p></li><li><p>浏览器向服务器发送 ACK 应答数据包表示收到并同意断开连接请求。</p></li></ul></li></ul><h2 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h2><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ul><li><p>初始化阶段：</p><ul><li><p>Vue 被实例化也就是 new Vue 之后，进入初始化阶段。</p></li><li><p>会初始化事件和生命周期。</p></li><li><p><code>beforeCreate</code> 触发，此时还无法访问实例上的数据。</p></li><li><p>再初始化数据注入和数据劫持，同时初始化 data methods computed watch 等数据。</p></li><li><p><code>created</code> 触发，此时可以访问实例上的数据。</p></li></ul></li><li><p>编译阶段：</p><ul><li><p>判断 Vue 是否配置 el 选项。</p></li><li><p>如果没有 el 选项，则等待使用 <code>$mount</code> 提供 el 选项；</p></li><li><p>存在 el 选项，再判断是否配置 template 选项。</p></li><li><p>如果有 template 选项，则编译模板得到 render 函数，返回虚拟 DOM；</p></li><li><p>如果没有 template 选项，则将 el 挂载容器的 outerHTML 作为模板进行编译。</p></li></ul></li><li><p>挂载阶段：</p><ul><li><p>挂载之前，<code>beforeMount</code> 触发，此时视图呈现的是未被解析的模板。DOM 操作无效。</p></li><li><p>将 Vue 实例挂载到 el 容器上，根据 render 函数返回的虚拟 DOM 生成真实 DOM，并替换 el 容器。</p></li><li><p>挂载之后，<code>mounted</code> 触发，视图呈现真实 DOM。一般在这个阶段发送请求、监听自定义事件、开启定时器。</p></li></ul></li><li><p>更新阶段：</p><ul><li><p>当响应式数据发生改变的时候，进入更新阶段。</p></li><li><p><code>beforeUpdate</code> 触发，此时数据已更新，视图还未更新。</p></li><li><p>得到新的虚拟 DOM 并使用 patch 函数比较新旧虚拟 DOM 并更新真实 DOM，</p></li><li><p><code>updated</code> 触发，此时数据和视图都完成更新。</p></li></ul></li><li><p>销毁阶段：</p><ul><li><p>当 <code>$destroy</code> 被调用，或条件渲染组件或路由时，进入销毁阶段。</p></li><li><p>实例销毁之前，<code>beforeDestroy</code> 触发。一般在这个阶段移除自定义事件、关闭定时器，防止内存泄漏。</p></li><li><p>实例销毁，取消所有 watcher 订阅，与所有子组件实例断开联系，移除所有事件监听器，解绑所有指令。</p></li><li><p>实例销毁之后，<code>destroyed</code> 触发。</p></li></ul></li></ul><h3 id="组件通信方式" tabindex="-1"><a class="header-anchor" href="#组件通信方式" aria-hidden="true">#</a> 组件通信方式</h3><ul><li><p>props 和自定义事件</p><p>用于父子组件通信。</p></li><li><p><code>v-model</code></p><p>用于父子组件双向通信。</p><p>Vue2 中绑定的是 <code>value</code> 属性和 <code>input</code> 事件；</p><p>Vue3 中绑定的是 <code>modelValue</code> 属性和 <code>update:modelValue</code> 事件。</p><p>如果需要绑定多个数据，Vue2 使用 <code>v-bind.sync</code>，Vue3 使用 <code>v-model:</code>。</p></li><li><p>事件总线</p><p>Vue2 的任意组件通信方式。在 Vue 的原型对象上挂载一个对象，将所有事件监听都绑定给这个对象。</p><p>Vue3 不再使用这种方式，因为移除了 <code>$on</code>，<code>$once</code>，<code>$off</code>。</p></li><li><p>插槽</p><p>用于父子组件通信。</p><p>父组件给子组件传递标签模板；如果是作用域插槽，子组件可以向父组件传递数据。</p></li><li><p>依赖注入</p><p>用于祖孙组件通信。</p><p>祖先组件通过 provide 提供属性和方法，后代组件通过 inject 注入。</p></li><li><p>透传</p><p>用于祖孙组件通信。</p><p>Vue2 中通过 <code>$attrs</code> 向内部组件传递属性，通过 <code>$listeners</code> 向内部组件传递方法。</p><p>Vue3 移除了 <code>$listeners</code>，透传的方法合并到了 <code>$attrs</code> 中，并且它还会传递样式。</p></li><li><p>状态管理库</p><p>用于共享全局状态或方法。</p><p>Vue2 一般使用 Vuex；Vue3 一般使用 Pinia。</p></li><li><p>hooks</p><p>也可以共享全局状态或方法。</p><p>是 Vue3 中替代状态管理库的一种方案。</p></li><li><p>本地存储</p><p>localStorage 和 sessionStorage，当上面的方式都实现不了时，使用本地存储。</p></li></ul><h3 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> Vuex</h3><ul><li><p>Vuex 是 Vue 的一个状态管理库，用于管理一些共享的数据。</p></li><li><p>主要由五个部分组成：</p><ul><li><p>state：用来存储数据的，相当于 data；</p></li><li><p>getters：计算属性，相当于 computed；</p></li><li><p>actions：用来处理一些异步操作或者复杂的逻辑；</p></li><li><p>mutations：用来处理同步代码，操作数据；</p></li><li><p>modules：就是将仓库分成多个模块，必要时需要开启命名空间。</p></li></ul></li><li><p>组件内可以通过 $store 或者 map 辅助函数访问和操作数据。</p></li><li><p>组件外只能通过引入 store 仓库访问和操作数据。</p></li></ul><h3 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia" aria-hidden="true">#</a> Pinia</h3><ul><li><p>Pinia 是 Vue3 的一个状态管理库，用于管理一些共享的数据。</p></li><li><p>Pinia 相对于 Vuex 的优点有：</p><ul><li><p>mutations 被弃用，操作更简单；</p></li><li><p>state 管理的数据是响应式的，可以直接修改；</p></li><li><p>它是以 hooks 的形式获取数据的，更符合函数式编程直觉；</p></li><li><p>TS 支持更友好；</p></li><li><p>支持组合式 API，这也是我比较喜欢的用法。</p></li></ul></li></ul><h3 id="vue2-和-vue3-的区别" tabindex="-1"><a class="header-anchor" href="#vue2-和-vue3-的区别" aria-hidden="true">#</a> Vue2 和 Vue3 的区别</h3><ul><li><p>新增语法：</p><ul><li><p>Vue3 新增了组合式 API，以及 setup 语法糖，并配合 TS 使用。</p></li><li><p>新增了 v-memo 指令，用来缓存 DOM 元素。</p></li></ul></li><li><p>更新用法：</p><ul><li><p>Vue3 使用 v-model 代替 Vue2 的 v-bind.sync 实现多个数据的双向绑定。</p></li><li><p>Vue2 的 v-model 绑定的是 <code>value</code> 属性和 <code>input</code> 事件；</p><p>Vue3 的 v-model 绑定的是 <code>modelValue</code> 属性和 <code>update:modelValue</code> 事件。</p></li><li><p>v-if 和 v-for 一起使用时，Vue2 是 v-for 优先级更高，Vue3 是 v-if 优先级更高。</p></li><li><p>两个生命周期函数改名了，beforeDestroy 改为 beforeUnmount，destroyed 改为 unmounted。</p></li></ul></li><li><p>删除旧语法：</p><ul><li><p>由于 Vue3 没有了组件实例，所以不能使用事件总线。此外，<code>$on</code>，<code>$off</code>，<code>$once</code> 也被移除了。</p></li><li><p>移除了 <code>$listeners</code>，传递方法合并到了 <code>$attrs</code> 中，并且 <code>$attrs</code> 还会传递样式。</p></li><li><p>移除了 <code>$children</code>，使用 ref 获取子组件实例。</p></li><li><p>移除了 .native 修饰符，而未被 defineEmits 接收的事件会被视为原生事件。</p></li><li><p>移除了 filter，使用 computed 代替。</p></li></ul></li><li><p>推荐工具：</p><ul><li>Vue3 推荐使用新的状态管理库 Pinia，和新的构建工具 Vite。</li></ul></li><li><p>原理方面：</p><ul><li><p>Vue3 放弃了对 IE 的支持，所以在 nextTick 的实现上做了一些优化。</p></li><li><p>Vue3 使用 Proxy 实现响应式，解决了 Vue2 使用 defineProperty 的缺陷。</p></li></ul></li></ul><h3 id="ref-和-reactive-的区别" tabindex="-1"><a class="header-anchor" href="#ref-和-reactive-的区别" aria-hidden="true">#</a> ref 和 reactive 的区别</h3><ul><li><p>ref 可以定义任意数据类型，reactive 只能定义对象或数组。</p></li><li><p>如果使用 ref 定义对象或数组，实际上内部是通过 reactive 实现的。</p></li><li><p>ref 定义的数据需要通过 value 访问，reactive 定义的数据可以直接访问。</p></li></ul><h3 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> Vue Router</h3><ul><li><p>Vue Router 是用来实现 Vue 的单页面应用。</p></li><li><p>单页面应用的特点是：</p><ul><li>应用只有一个页面。路由跳转不会刷新整个页面，而是局部刷新，但是会有历史记录。</li></ul></li><li><p>路由的两种模式：</p><ul><li><p>hash 模式：</p><p>路径后面会拼接一个 &quot;#&quot;，缺点就是很丑。</p><p>兼容性较好，可以兼容到 IE6</p><p>原理是通过 <code>window.location.hash</code> 实现跳转，通过 <code>window.onhashchange</code> 监听 hash 路径的改变。</p></li><li><p>history 模式：</p><p>与 hash 模式相比，好处就是没有很丑的 &quot;#&quot;</p><p>兼容性较差，只能兼容到 IE10</p><p>页面刷新时，可能会出现 404 问题。</p><p>原理是通过 <code>window.history.pushState</code> 实现跳转，通过 <code>window.onpopstate</code> 监听 url 的改变。</p></li></ul></li><li><p>提供了两个组件：<code>&lt;router-link&gt;</code> 是声明式导航；<code>&lt;router-view&gt;</code> 是用来渲染活跃的路由。</p></li><li><p>提供了两个对象：router 提供了一些方法，用来实现编程式导航；route 提供了当前路由的一些信息。</p></li><li><p>动态路由传参：query 参数和 params 参数。</p></li><li><p>导航守卫：</p><ul><li><p>导航被触发。</p></li><li><p>如果是离开一个组件，调用组件内离开时守卫 <code>beforeRouteLeave</code>。</p></li><li><p>如果不是，则调用全局前置守卫 <code>beforeEach</code>。</p></li><li><p>如果是动态路由切换，调用组件内更新时守卫 <code>beforeRouteUpdate</code>。再调用全局解析守卫 <code>beforeResolve</code>。</p></li><li><p>如果不是动态路由切换，调用路由独享守卫 <code>beforeEnter</code>。</p></li><li><p>然后解析异步路由组件。</p></li><li><p>调用组件内进入时守卫 <code>beforeRouteEnter</code>。</p></li><li><p>调用全局解析守卫 <code>beforeResolve</code>。</p></li><li><p>导航被确认。</p></li><li><p>最后调用全局后置钩子 <code>afterEach</code>。</p></li><li><p>触发 DOM 更新。</p></li></ul></li><li><p>路由懒加载：</p><p>路由懒加载使用的是异步组件。使用 import 动态引入组件，让 webpack 将组件分开打包，需要使用的时候再按需加载。</p></li></ul><h3 id="nexttick-的原理" tabindex="-1"><a class="header-anchor" href="#nexttick-的原理" aria-hidden="true">#</a> nextTick 的原理</h3><ul><li><p>nextTick 是什么？</p><p>nextTick 是用于异步执行回调函数的方法，会在下一次 DOM 更新循环结束之后执行回调函数。主要用于修改响应式数据后，需要等待 DOM 更新完成后执行某些操作。例如打开对话框需要等待表单元素渲染完毕才能触发表单校验规则，使用 Swiper 组件需要等待图片资源请求完成才能开启图片轮播。由于 Vue 在数据更新后不会立即进行 DOM 的重新渲染，而是在下一次事件循环中进行批量更新，因此直接在数据修改后获取 DOM 可能会得到旧的结果或者报错。此时可以使用 nextTick 确保在 DOM 更新后执行回调。</p></li><li><p>原理：</p><p>在 Vue2 和 Vue3 中，nextTick 的原理有所不同。在 Vue2.6 和 2.7 的实现中，先准备一个 callbacks 数组，用来存放回调函数。再定义一个 flushCallbacks 方法，用来遍历 callbacks 数组并执行回调函数。再定义一个 timerFunc 函数，用来将执行回调的方法 flushCallbacks 添加到异步队列。考虑到兼容性问题，timerFunc 函数内部依次使用了四种添加异步任务的方法，分别是 Promise、MutationObserver、setImmediate、setTimeout，只选择次序最高的一种。Promise 通过 then 方法将回调函数添加到微队列；MutationObserver 会监听 DOM 元素的变化，并在变化时将回调函数添加到微队列；setImmediate 和 setTimeout 都是将回调函数添加到宏队列，但是 setImmediate 用于 nodejs 环境。</p></li><li><p>调用方式：</p><p>nextTick 有两种调用方式：回调函数形式和 Promise 形式。执行 nextTick 时，会将一个匿名函数添加到 callbacks 数组中。再执行 timerFunc，将 flushCallbacks 方法添加到异步队列。在这个匿名函数中，判断 nextTick 是否传入了回调函数。如果传入了回调函数，就会执行这个回调函数；如果没有，就会返回一个 Promise，并执行 resolve，这样就会将 then 方法中的代码添加到微队列。等浏览器执行完同步代码，就会开始执行异步队列中的任务。执行到 flushCallbacks 函数时，会遍历 callbacks 数组中的回调函数并执行。</p></li><li><p>Vue3 的区别：</p><p>Vue3 不再考虑兼容性问题，所以只会使用 Promise 的 then 方法将回调函数添加到异步队列。</p></li></ul><h3 id="双向绑定原理" tabindex="-1"><a class="header-anchor" href="#双向绑定原理" aria-hidden="true">#</a> 双向绑定原理</h3><ul><li><p>什么是双向绑定？</p><ul><li><code>v-model</code> 主要用于表单元素的双向绑定，用来收集表单数据。对于不同的元素，它绑定的属性和事件不同。</li></ul></li><li><p>实现原理：</p><ul><li><p>如果是输入框或文本域，绑定 <code>value</code> 属性和 <code>input</code> 事件；</p></li><li><p>如果是单选框或多选框，绑定 <code>checked</code> 属性和 <code>change</code> 事件；</p></li><li><p>如果是下拉列表，绑定 <code>value</code> 属性和 <code>change</code> 事件；</p></li><li><p>如果是组件，Vue2 绑定 <code>value</code> 属性和 <code>input</code> 事件，</p><p>Vue3 绑定 <code>modelValue</code> 属性和 <code>update:modelValue</code> 事件。</p></li></ul></li></ul><h3 id="vue2-响应式原理" tabindex="-1"><a class="header-anchor" href="#vue2-响应式原理" aria-hidden="true">#</a> Vue2 响应式原理</h3><ul><li><p>响应式原理指的是：</p><p>当响应式数据更新时，根据 render 函数返回的虚拟 DOM 树生成真实 DOM 元素，插入到页面，触发视图更新。</p></li><li><p>响应式原理的具体过程分为数据代理和数据劫持：</p><ul><li><p>数据代理：</p><p>遍历 _data 中的数据，使用 defineProperty 给实例扩展一个同名属性，并通过 get 和 set 监听这些属性。它们实际都是操作 _data 中的数据，所以我们访问实例上的数据就是访问 _data 中的数据。同时代理的还有 props、computed、methods、watch。</p></li><li><p>数据劫持：</p><p>遍历 _data 中的数据，然后调用 defineReactive 函数为每一个属性都创建一个 dep 对象，通过 defineProperty 对这些属性进行重写，并添加 getter 和 setter，此时 dep 对象会以闭包的形式保存在 getter 和 setter 中。</p><p>当我们访问响应式数据时，就会触发 get 方法，它会返回数据的值，同时调用 dep 的 depend 方法，让 dep 和 watcher 相互收集依赖。dep 收集 watcher 是为了可以通过 dep 找到 watcher，然后触发视图更新；watcher 收集 dep 是为了防止重复收集。在 dep 的 depend 方法中，会调用 watcher 的 addDep 方法将 dep 收集到 newDeps 数组中，同时还会收集 dep 对象的 id；在 addDep 方法中，又会调用 dep 的 addSub 方法将 watcher 收集到 subs 数组中。这就是一个相互收集依赖的过程。</p><p>当我们修改响应式数据时，就会触发 set 方法，它会更新数据，同时调用 dep 的 notify 方法，遍历 dep 的 subs 数组中的 watcher，并按照 id 从小到大排列，然后依次执行每个 watcher 的 update 方法。在 update 方法中，判断 watcher 的类型，如果是计算 watcher，则不执行回调，后续会在 evaluate 方法中计算求值；如果是渲染 watcher 或侦听 watcher，则把 watcher 对象添加到一个调度队列中，然后通过 nextTick 将一个调度任务的方法 flushSchedulerQueue 添加到异步队列，等待异步执行。当执行这个调度任务的方法时，会从调度队列中依次取出每一个 watcher 对象执行它的 run 方法触发视图更新并重新收集依赖。</p></li></ul></li></ul><h3 id="vue3-响应式原理" tabindex="-1"><a class="header-anchor" href="#vue3-响应式原理" aria-hidden="true">#</a> Vue3 响应式原理</h3><ul><li><p>Vue2 的响应式使用的是 defineProperty，它只能监听对象的现有属性，无法监听新增属性或者删除属性。</p></li><li><p>Vue3 使用的是 Proxy 进行数据监听，它可以监听整个对象，包括对属性的读取、新增、修改和删除等操作。</p></li><li><p>Vue3 的响应式主要用了四个方法：reactive、track、effect、trigger</p><ul><li><p>reactive：</p><p>它是用来将数据定义成响应式的。当我们定义 reactive 数据时，内部会通过 Proxy 对数据进行代理。但是 Proxy 只能进行代理对象的第一层属性，所以如果是引用类型，会递归调用 reactive，进行深度代理。</p><p>当我们访问响应式数据的时候，就会触发 get 方法，会使用 Reflect.get 返回数据的值，然后通过 track 收集依赖，相对于 Vue2 中 dep 的 depend 方法。</p><p>当我们修改响应式数据的时候，就会触发 set 方法，会使用 Reflect.set 更新数据，然后通过 trigger 触发视图更新，相对于 Vue2中 dep 的 notify 方法。</p></li><li><p>track：</p><p>它是用来收集依赖的。建立响应式数据和 effect 实例之间的联系。</p></li><li><p>effect：</p><p>它是用来触发视图更新的。</p><p>初始化渲染时，effect 方法会执行一遍，此时会生成 effect 实例，将更新视图的方法保存在 effect 实例，并调用这个方法来完成页面的初始化渲染。此时会触发 Proxy 的 get 方法，通过 track 收集依赖：创建一个 WeakMap 容器，存储的 key 为响应式对象，value 是一个 Map 容器，Map 容器的 key 是响应式数据的某个属性，value 是一个 Set 容器，Set 容器会存储 effect 实例。这就是一个建立响应式数据和 effect 实例之间的联系的过程。</p></li><li><p>trigger：</p><p>它是用来更新依赖的。找到响应式数据对应的 effect 实例，调用 run 方法更新视图。</p><p>当响应式数据更新时，会触发 Proxy 的 set 方法，通过 trigger 更新依赖：通过 WeakMap 容器找到响应式数据对应的 effect 实例，调用 run 方法更新视图，完成响应式。这就是一个更新依赖的过程。</p></li></ul></li></ul><h3 id="keep-alive-原理" tabindex="-1"><a class="header-anchor" href="#keep-alive-原理" aria-hidden="true">#</a> keep-alive 原理</h3><ul><li><p>keep-alive 是什么：</p><p>keep-alive 是用来缓存组件的，被缓存的组件在切换时不会被销毁，而是触发对应的 activated 和 deactivated 这两个生命周期函数。</p></li><li><p>keep-alive 的原理：</p><p>在 created 阶段，创建一个 cache 对象，用来缓存组件；再创建一个 keys 数组，用来缓存组件的 key。</p><p>在初始化渲染时触发 render 函数，判断组件是否符合缓存规则，也就是判断组件名是否在 include 数组中或者不在 exclude 数组中。如果符合缓存规则，再判断组件之前是否缓存过，如果缓存过，就使用之前缓存的组件，还需要移除原来缓存的 key，并将最新的 key 添加到缓存列表 keys 的末尾，然后返回缓存的组件；如果之前没有缓存过，就将新组件和 key 临时存储一下，等待 mounted 阶段再缓存，然后返回新组件。如果不符合缓存规则，就不缓存，直接返回组件。</p><p>在挂载完成后，也就是 mounted 阶段，使用 cacheVNode 方法将组件缓存起来，还要判断缓存列表长度是否超过设置的最大缓存数量，如果超过的话，就使用 LRU 算法，删除缓存列表的第一个组件。同时监听 include 和 exclude 数组，一旦它们发生变化，就删除不需要缓存的组件。</p><p>在组件渲染时，会触发 insert 方法，判断是不是缓存的组件，如果是，就会触发 activated 生命周期。</p><p>在组件卸载时，会触发 destroy 方法，判断是不是缓存的组件，如果是，就会触发 disactivated 生命周期。</p></li></ul><h2 id="移动端" tabindex="-1"><a class="header-anchor" href="#移动端" aria-hidden="true">#</a> 移动端</h2><h3 id="移动端适配方案" tabindex="-1"><a class="header-anchor" href="#移动端适配方案" aria-hidden="true">#</a> 移动端适配方案</h3><h3 id="物理像素边框方案" tabindex="-1"><a class="header-anchor" href="#物理像素边框方案" aria-hidden="true">#</a> 物理像素边框方案</h3><h2 id="小程序" tabindex="-1"><a class="header-anchor" href="#小程序" aria-hidden="true">#</a> 小程序</h2><h3 id="小程序的生命周期" tabindex="-1"><a class="header-anchor" href="#小程序的生命周期" aria-hidden="true">#</a> 小程序的生命周期</h3><ul><li><p>应用生命周期：</p><ul><li><p><code>onLaunch</code> 小程序初始化。鉴权★</p></li><li><p><code>onShow</code> 小程序启动或切前台★</p></li><li><p><code>onHide</code> 小程序切后台★</p></li></ul></li><li><p>页面生命周期：</p><ul><li><p><code>onLoad</code> 页面加载（一次）。发请求★</p></li><li><p><code>onReady</code> 页面初次渲染完成（一次）★</p></li><li><p><code>onUnload</code> 页面卸载（一次）★</p></li><li><p><code>onShow</code> 页面显示（多次）。发请求★</p></li><li><p><code>onHide</code> 页面隐藏（多次）。解绑定时器★</p></li><li><p><code>onPageScroll</code> 页面滚动</p></li><li><p><code>onResize</code> 页面尺寸变化</p></li><li><p><code>onPullDownRefresh</code> 页面下拉</p></li><li><p><code>onReachBottom</code> 页面上拉触顶</p></li><li><p><code>onShareAppMessage</code> 用户点击右上角分享</p></li></ul></li><li><p>组件生命周期：</p><p>组件自身生命周期</p><ul><li><p><code>created</code> 组件实例被创建时执行</p></li><li><p><code>attached</code> 组件实例进入页面节点树时执行</p></li><li><p><code>detached</code> 组件实例被从页面节点树移除时执行</p></li><li><p><code>ready</code> 组件在视图层布局完成后执行</p></li><li><p><code>moved</code> 组件实例被移动到节点树另一个位置时执行</p><p>组件所在页面生命周期</p></li><li><p><code>show</code> 组件所在页面显示时执行</p></li><li><p><code>hide</code> 组件所在页面隐藏时执行</p></li><li><p><code>resize</code> 组件所在页面尺寸变化时执行</p></li></ul></li></ul><h3 id="小程序的分包" tabindex="-1"><a class="header-anchor" href="#小程序的分包" aria-hidden="true">#</a> 小程序的分包</h3><p>小程序有体积的限制（2M），如果需要让小程序体积更大功能更多，就需要进行分包（20M）。分包只在使用时加载。</p><p>每个分包小程序必须有一个主包，主包中有启动页面、TabBar 页面以及一些公共资源。</p><p>普通分包：将需要分包的文件单独放入一个文件夹，在 <code>app.json</code> 的 subpackages 字段中声明分包结构。</p><p>普通分包可以使用主包中的公共资源，例如发送请求的函数、公共样式。</p><p>独立分包：和普通分包配置一样，需要再添加一个 independent 字段开启独立分包。</p><p>独立分包不能使用主包中的任何内容。</p><h3 id="小程序的组件通信" tabindex="-1"><a class="header-anchor" href="#小程序的组件通信" aria-hidden="true">#</a> 小程序的组件通信</h3><h3 id="小程序的登录流程" tabindex="-1"><a class="header-anchor" href="#小程序的登录流程" aria-hidden="true">#</a> 小程序的登录流程</h3><p>首先在 onLaunch 生命周期中进行登录鉴权，如果鉴权失败就跳转到登录页面。通过 <code>wx.login</code> 得到一个临时的授权码 code；然后把这个授权码发送给服务器获取 token；再携带 token 去向服务器请求用户数据。如果用户登录过就会得到用户数据，如果用户没有登录过就会随机生成一个用户名和头像。</p><h3 id="小程序的支付流程" tabindex="-1"><a class="header-anchor" href="#小程序的支付流程" aria-hidden="true">#</a> 小程序的支付流程</h3><p>提交订单，将订单信息（商品数据、收件人信息等）发送给服务器，得到订单号；再将订单号发送给服务器，得到用于支付的参数（时间戳、ID、签名等）；然后调用 <code>wx.requestPayment</code> 传入支付参数，跳转到用户支付的页面；用户支付成功，跳转页面。</p><h3 id="小程序的上线流程" tabindex="-1"><a class="header-anchor" href="#小程序的上线流程" aria-hidden="true">#</a> 小程序的上线流程</h3><p>将代码上传到微信平台；点击提交审核；审核通过就上线了。</p><h3 id="小程序更新后-如何让用户看到最新效果" tabindex="-1"><a class="header-anchor" href="#小程序更新后-如何让用户看到最新效果" aria-hidden="true">#</a> 小程序更新后，如何让用户看到最新效果</h3><p>判断小程序版本是否支持更新机制；创建一个 updateManager 实例，通过这个实例监听检测版本更新事件，如果有新的版本，小程序就会自动在后台下载新版本，然后监听小程序新版本下载完成事件，下载完成后就会重启小程序。</p><h3 id="小程序和-uni-app-的区别" tabindex="-1"><a class="header-anchor" href="#小程序和-uni-app-的区别" aria-hidden="true">#</a> 小程序和 uni-app 的区别</h3><h3 id="uni-app-的生命周期" tabindex="-1"><a class="header-anchor" href="#uni-app-的生命周期" aria-hidden="true">#</a> uni-app 的生命周期</h3><h3 id="uni-app-怎么打包成-apk" tabindex="-1"><a class="header-anchor" href="#uni-app-怎么打包成-apk" aria-hidden="true">#</a> uni-app 怎么打包成 apk</h3><h3 id="开发-uni-app-使用过哪些插件库" tabindex="-1"><a class="header-anchor" href="#开发-uni-app-使用过哪些插件库" aria-hidden="true">#</a> 开发 uni-app 使用过哪些插件库</h3><h2 id="项目难点" tabindex="-1"><a class="header-anchor" href="#项目难点" aria-hidden="true">#</a> 项目难点</h2><h3 id="二次封装请求" tabindex="-1"><a class="header-anchor" href="#二次封装请求" aria-hidden="true">#</a> 二次封装请求</h3><p>携带请求前缀；</p><p>设置请求拦截器，携带 token；</p><p>设置响应拦截器，处理请求结果：失败的回调中提示请求失败的原因；成功的回调中提示功能失败的原因或返回数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;element-plus&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUserInfoStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/stores/userInfo&quot;</span>


<span class="token comment">// 功能失败的错误原因</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> authErrMessage <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">10031</span><span class="token operator">:</span> <span class="token string">&quot;登录失效，请重新登录&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10032</span><span class="token operator">:</span> <span class="token string">&quot;您太久没登录，请重新登录&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10033</span><span class="token operator">:</span> <span class="token string">&quot;账户未绑定角色，请联系管理员绑定角色&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10034</span><span class="token operator">:</span> <span class="token string">&quot;该用户未注册，请联系管理员注册用户&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10035</span><span class="token operator">:</span> <span class="token string">&quot;code 无法获取对应第三方平台用户&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10036</span><span class="token operator">:</span> <span class="token string">&quot;该账户未关联员工，请联系管理员做关联&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10037</span><span class="token operator">:</span> <span class="token string">&quot;账号已无效&quot;</span><span class="token punctuation">,</span>
  <span class="token number">10038</span><span class="token operator">:</span> <span class="token string">&quot;账号未找到&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 请求失败的错误原因</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> networkErrMessage <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">400</span><span class="token operator">:</span> <span class="token string">&quot;错误的请求&quot;</span><span class="token punctuation">,</span>
  <span class="token number">401</span><span class="token operator">:</span> <span class="token string">&quot;未授权，请重新登录&quot;</span><span class="token punctuation">,</span>
  <span class="token number">403</span><span class="token operator">:</span> <span class="token string">&quot;拒绝访问&quot;</span><span class="token punctuation">,</span>
  <span class="token number">404</span><span class="token operator">:</span> <span class="token string">&quot;未找到该资源&quot;</span><span class="token punctuation">,</span>
  <span class="token number">405</span><span class="token operator">:</span> <span class="token string">&quot;请求方法未允许&quot;</span><span class="token punctuation">,</span>
  <span class="token number">408</span><span class="token operator">:</span> <span class="token string">&quot;请求超时&quot;</span><span class="token punctuation">,</span>
  <span class="token number">500</span><span class="token operator">:</span> <span class="token string">&quot;服务器端出错&quot;</span><span class="token punctuation">,</span>
  <span class="token number">502</span><span class="token operator">:</span> <span class="token string">&quot;网络错误&quot;</span><span class="token punctuation">,</span>
  <span class="token number">503</span><span class="token operator">:</span> <span class="token string">&quot;服务不可用&quot;</span><span class="token punctuation">,</span>
  <span class="token number">504</span><span class="token operator">:</span> <span class="token string">&quot;网络超时&quot;</span><span class="token punctuation">,</span>
  <span class="token number">505</span><span class="token operator">:</span> <span class="token string">&quot;http 版本不支持该请求&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 携带请求前缀</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_URL</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">50000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 携带 token</span>
    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useUserInfoStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>token
    
    <span class="token keyword">return</span> config
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!==</span> <span class="token number">20000</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> errorMessage <span class="token operator">=</span> authErrMessage<span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token operator">||</span> message <span class="token operator">||</span> <span class="token string">&quot;Error&quot;</span>
      
      <span class="token comment">// 提示功能失败的原因</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span>
      
      <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">10031</span> <span class="token operator">||</span> code <span class="token operator">===</span> <span class="token number">10032</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清空用户信息</span>
        <span class="token function">useUserInfoStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token comment">// 去登录页</span>
        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span>
      <span class="token punctuation">}</span>
      
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> data
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>networkErrMessage<span class="token punctuation">[</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;网络超时&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;Network&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;网络连接错误&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;canceled&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;请求取消了&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取消重复请求" tabindex="-1"><a class="header-anchor" href="#取消重复请求" aria-hidden="true">#</a> 取消重复请求</h3><ul><li><p>需求背景：</p><p>用户可能会存在多次发送重复请求的情况，比如说有个按钮点击没做处理，用户一直点就会一直发请求，这个可以用防抖节流来优化。但是有的时候不太好做节流，比如说是别人封装的组件，不好去改他的代码，就要取消重复请求。</p></li><li><p>具体做法：</p><p>在请求拦截器中，准备一个 Map 容器，用来保存正在发送的请求，键名为请求的字符串标识，键值为一个取消请求的方法。每次发送请求时都判断在这个容器中，是否有相同的请求正在发送，如果有的话就取消上一次的请求，并把它从容器中移除；如果没有的话就把当前请求和取消这个请求的方法添加到容器中。等请求发送完成，去响应拦截器中将这个请求从容器中移除，就可以再次发送相同请求了。</p></li><li><p>怎么判断两个请求相同？</p><p>判断两个请求是否是同一个请求，就是判断它们的请求方式、请求地址、请求头、请求体、携带参数是否一致。</p></li></ul><h3 id="取消上一页请求" tabindex="-1"><a class="header-anchor" href="#取消上一页请求" aria-hidden="true">#</a> 取消上一页请求</h3><ul><li><p>需求背景：</p><p>如果用户在一个页面点了五次按钮，然后切换到另一个页面，那么就需要等待上一个页面的五次请求发送完成，才能在当前页面发送请求。这是因为浏览器在 HTTP/1.1 协议下，同一时间内在一个域名下最多只能发六个请求，所以如果一次性发送的请求超过六个，超出的请求就需要排队。这样不仅上一个页面的请求没有意义，还会使当前页面的请求发不出去，导致页面阻塞渲染。这时候就需要做一些处理，取消上一个页面的请求。</p></li><li><p>具体做法：</p><p>在将当前请求和取消请求的方法添加到 Map 容器中的同时，添加当前页面的路径信息。也就是容器中存储的数据键名为请求的字符串标识，键值为一个对象，包括取消请求的方法和页面的路径信息。然后去路由全局前置守卫中遍历容器，如果存储的路径信息与要去的页面路径不相等，说明它们不是同一个页面的请求，就取消容器中的这个请求，并把它从容器中移除。</p></li></ul><h3 id="无感刷新" tabindex="-1"><a class="header-anchor" href="#无感刷新" aria-hidden="true">#</a> 无感刷新</h3><ul><li><p>需求背景：</p><p>因为项目中是用到了七天免登录的，但是如果只这么做的话，用户每隔七天就要去重新登录一次，这样体验就不是很好。所以使用无感刷新来优化用户的体验，用户只要在七天内登录了，就会一直有最新的 token，一直处于免登录状态。只有超过连续七天没登录，token 才会过期，用户才需要重新登录。</p></li><li><p>具体做法：</p><p>后端会返回两个 token，一个是 Access token，有效期很短，比如半个小时，它是用来请求用户数据的；一个是 Refresh token，有效期较长，比如七天或者半个月，它是用来请求 Access token 的。我们请求数据时，是携带 Access token 发送的，如果发现 Access token 过期了，就需要携带 Refresh token 去请求，服务器会将最新的 Access token 和 Refresh token 都返回，然后携带新的 Access token 重新请求数据。这样就可以实现无感刷新的效果。还需要设置定时刷新，每隔一段时间，去请求一次 Access token，这样确保用户停留在页面的时候，双 token 一直存在。</p></li></ul><h3 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理" aria-hidden="true">#</a> 权限管理</h3><h3 id="大数据渲染" tabindex="-1"><a class="header-anchor" href="#大数据渲染" aria-hidden="true">#</a> 大数据渲染</h3><ul><li><p>WebSocket：</p><p>开启 WebSocket 实时接收数据。连接成功后还需要持续检测是否断线，如果断开连接，就会触发 close 事件，在 close 事件中进行重连。但是弱网、断网情况下，不会触发 close 事件，所以就需要使用心跳检测机制检测是否断线。</p></li><li><p>心跳检测：</p><p>客户端每隔一分钟向服务器发送一个特定的信号，比如 ping；服务器要立即返回一个信号，比如 pong。客户端需要检测在规定时间内（5 秒）是否收到信号，如果客户端收到了信号，说明连接没问题，开始下一次心跳检测；如果没有收到信号，说明连接有问题，需要重连。</p></li><li><p>断线重连：</p><p>设置最大重连次数，每隔一段时间重连一次，如果超过最大次数，就不重连了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* useSocket.ts */</span>

<span class="token keyword">class</span> <span class="token class-name">Socket</span> <span class="token punctuation">{</span>
  <span class="token constant">HEART_CHECK_TIME</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// 心跳检测间隔时间</span>
  <span class="token constant">HEART_CHECK_END_TIME</span> <span class="token operator">=</span> <span class="token number">5000</span> <span class="token comment">// 心跳检测接收服务器信号时间</span>
  success <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 心跳检测是否成功</span>
  
  <span class="token constant">RECONNECT_TIME</span> <span class="token operator">=</span> <span class="token number">30000</span> <span class="token comment">// 断线重连间隔时间</span>
  <span class="token constant">MAX_RECONNECT_COUNT</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// 最大重连次数</span>
  reconnectCount <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前重连次数</span>
  <span class="token literal-property property">reconnectId</span><span class="token operator">:</span> NodeJS<span class="token punctuation">.</span>Timeout <span class="token operator">|</span> <span class="token keyword">undefined</span>
  
  <span class="token literal-property property">url</span><span class="token operator">:</span> string
  <span class="token literal-property property">ws</span><span class="token operator">:</span> WebSocket
  
  <span class="token literal-property property">callbacks</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url
    <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">initSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个 WebSocket 实例</span>
    <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    
    <span class="token comment">// WebSocket 连接成功</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onPong<span class="token punctuation">)</span> <span class="token comment">// 监听 pong 信号</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">keepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 心跳检测</span>
      
      <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectCount <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 重置重连次数</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// WebSocket 断开连接</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始重连</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// WebSocket 连接失败</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
      
      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> ws
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 接收消息</span>
  <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cb</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 删除消息</span>
  <span class="token function">removeMessage</span><span class="token punctuation">(</span><span class="token parameter">cb<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=&gt;</span> callback <span class="token operator">!==</span> cb<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 监听 pong 信号</span>
  <span class="token function-variable function">onPong</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> MessageEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 心跳检测</span>
  <span class="token function">keepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 向服务器发送 ping 信号</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span>
      
      <span class="token comment">// 在 5s 内检测是否接收到 pong 信号</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">false</span>
          
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">keepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始下一次心跳检测</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭 WebSocket</span>
          
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始重连</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">HEART_CHECK_END_TIME</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">HEART_CHECK_TIME</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 断线重连</span>
  <span class="token function">reconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 超过次数限制，就不重连了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconnectCount <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">MAX_RECONNECT_COUNT</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconnectId<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectCount<span class="token operator">++</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">RECONNECT_TIME</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useSocket</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>虚拟列表：</p><p>假如有一万条数据需要处理，如果每条数据都生成一个元素，那么就会造成页面卡死。</p><p>降采样策略：我们可以不用渲染全部数据，只渲染能看见的二十条数据，其他数据替换为一个空元素进行占位，这个空元素的大小与原本需要渲染的数据的大小相同。</p><p>设置渲染数据范围：我们需要知道这二十条数据在总数据列表中的开始索引和结束索引，那么这个空元素的高度就是开始索引乘数据的高度。</p><p>控制数据的变化：用平移来控制容器的滚动，每平移一条数据的高度，开始索引就加一，从而实现数据的滚动效果。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> onBeforeUnmount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
  <span class="token keyword">import</span> useSocket <span class="token keyword">from</span> <span class="token string">&quot;./useSocket.ts&quot;</span>
  
  <span class="token keyword">interface</span> <span class="token class-name">ItemType</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> string
    <span class="token literal-property property">date</span><span class="token operator">:</span> string
    <span class="token literal-property property">address</span><span class="token operator">:</span> string
    <span class="token literal-property property">number</span><span class="token operator">:</span> number
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> virtualList <span class="token operator">=</span> ref<span class="token operator">&lt;</span>ItemType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> startIndex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> endIndex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> realList <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> virtualList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">.</span>value<span class="token punctuation">,</span> endIndex<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">useSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8000&quot;</span><span class="token punctuation">)</span>
  
  socket<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> ItemType<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    virtualList<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>virtualList<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>data<span class="token punctuation">]</span>
    
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> top <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  
  <span class="token keyword">let</span> <span class="token literal-property property">timer</span><span class="token operator">:</span> NodeJS<span class="token punctuation">.</span>Timeout
  <span class="token keyword">let</span> isMouseEnter <span class="token operator">=</span> <span class="token boolean">false</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>virtualList<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">23</span> <span class="token operator">||</span> isMouseEnter<span class="token punctuation">)</span> <span class="token keyword">return</span>
    
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      top<span class="token punctuation">.</span>value <span class="token operator">-=</span> <span class="token number">0.6</span>
      
      startIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>value <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      endIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> startIndex<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">20</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">onEnter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    isMouseEnter <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">onLeave</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    isMouseEnter <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>需求人数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>日期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>人数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
      
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@mouseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onEnter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@mouseleave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onLeave<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ transform: \`translateY(\${ top }px)\` }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ height: startIndex * 30 + &#39;px&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
          
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ id, date,address,number } in realList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ date }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ address }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ number }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.container .main</span> <span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token selector">.container .main .row</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="大屏适配" tabindex="-1"><a class="header-anchor" href="#大屏适配" aria-hidden="true">#</a> 大屏适配</h3><p>通过计算 scale 缩放系数完成适配。</p><p>当屏幕宽高比大于设计图宽高比，说明是宽屏，缩放系数为屏幕高度除以设计图高度；</p><p>当屏幕宽高比小于设计图宽高比，说明是竖屏，缩放系数为屏幕宽度除以设计图宽度。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onBeforeUnmount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
  
  <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> draftWidth <span class="token operator">=</span> <span class="token number">1519</span>
  <span class="token keyword">const</span> draftHeight <span class="token operator">=</span> <span class="token number">747</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">resize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> screenWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
    <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> screenHeight <span class="token operator">&gt;</span> draftWidth <span class="token operator">/</span> draftHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scale<span class="token punctuation">.</span>value <span class="token operator">=</span> screenHeight <span class="token operator">/</span> draftHeight
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      scale<span class="token punctuation">.</span>value <span class="token operator">=</span> screenWidth <span class="token operator">/</span> draftWidth
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> resize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> resize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ transform: \`scale(\${ scale })\` }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gitlab-ci-cd" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-cd" aria-hidden="true">#</a> GitLab CI/CD</h3><h3 id="前端监控-埋点" tabindex="-1"><a class="header-anchor" href="#前端监控-埋点" aria-hidden="true">#</a> 前端监控&amp;埋点</h3><h2 id="组件封装" tabindex="-1"><a class="header-anchor" href="#组件封装" aria-hidden="true">#</a> 组件封装</h2><h3 id="按钮权限组件" tabindex="-1"><a class="header-anchor" href="#按钮权限组件" aria-hidden="true">#</a> 按钮权限组件</h3><h3 id="图表组件" tabindex="-1"><a class="header-anchor" href="#图表组件" aria-hidden="true">#</a> 图表组件</h3><p>先按需引入，然后就可以封装一个组件，传入图表配置，必须配置的有 x 轴和 y 轴（y 轴可以是一个空对象），其他的还有 title 标题，tooltip 提示框，legend 图例，grid 布局等。这里需要注意，必须在 mounted 生命周期中初始化实例，因为在挂载前是访问不了 DOM 元素的。</p><h3 id="全屏组件" tabindex="-1"><a class="header-anchor" href="#全屏组件" aria-hidden="true">#</a> 全屏组件</h3><h3 id="大文件上传" tabindex="-1"><a class="header-anchor" href="#大文件上传" aria-hidden="true">#</a> 大文件上传</h3><h3 id="表单组件" tabindex="-1"><a class="header-anchor" href="#表单组件" aria-hidden="true">#</a> 表单组件</h3><h3 id="表格组件" tabindex="-1"><a class="header-anchor" href="#表格组件" aria-hidden="true">#</a> 表格组件</h3><h2 id="项目优化" tabindex="-1"><a class="header-anchor" href="#项目优化" aria-hidden="true">#</a> 项目优化</h2><h3 id="代码优化" tabindex="-1"><a class="header-anchor" href="#代码优化" aria-hidden="true">#</a> 代码优化</h3><h3 id="打包工具优化" tabindex="-1"><a class="header-anchor" href="#打包工具优化" aria-hidden="true">#</a> 打包工具优化</h3><h3 id="网络优化" tabindex="-1"><a class="header-anchor" href="#网络优化" aria-hidden="true">#</a> 网络优化</h3><h3 id="页面白屏的原因" tabindex="-1"><a class="header-anchor" href="#页面白屏的原因" aria-hidden="true">#</a> 页面白屏的原因</h3><ul><li><p>打包后的 JS 和 CSS 文件太大，导致浏览器加载时间变长，加载完成之后才进行页面渲染，从而导致白屏</p></li><li><p>解决：</p><ul><li><p>如果白屏时间不是很长，可以添加一个 loading 效果</p></li><li><p>使用路由懒加载，分开打包文件，访问路由时才加载对应的文件</p></li><li><p>CDN 资源优化，把 vue 等第三方资源，改为通过 CDN 链接获取，在 index.html 插入相应的链接</p></li><li><p>静态资源缓存：资源长期不会修改，使用强制缓存；资源随时变化，使用协商缓存</p></li><li><p>服务端渲染：在服务端将渲染逻辑处理好，将处理好的 html 返回给前端</p></li></ul></li></ul>`,100),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","面试经验.html.vue"]]);export{d as default};

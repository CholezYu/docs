import{_ as u,r as c,o as k,c as r,a as p,w as a,b as i,e as s,d as n}from"./app-8_UERhAn.js";const d={},v=i(`<h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><ul><li><p>事件循环是浏览器用于调度异步任务的机制：</p><ul><li><p>浏览器主要的进程有：浏览器进程、网络进程、渲染进程。</p></li><li><p>渲染进程中又包含了多个线程：GUI 渲染线程、JS 引擎线程、事件触发线程、计时线程、渲染主线程。</p></li></ul></li><li><p>事件循环具体是什么？</p><p>浏览器的渲染进程启动后，会开启一个渲染主线程，它会进入一个无限循环，每一次循环都会检查任务队列中是否有任务存在。如果有，就取出第一个任务执行，执行完进入下一次循环；如果没有，则进入休眠状态。其他线程可以随时向任务队列添加任务：比如说计时线程，计时器时间到了，往里面加任务；比如说交互线程，监听到了用户点击，往里面加任务。加任务的时候一定是把它加到任务队列的末尾，先来的先执行，后来的排队。在添加新任务时，如果主线程处于休眠状态，会将其唤醒，继续循环执行任务。这个过程叫做事件循环。</p></li><li><p>事件循环是实现异步的方式，那么异步又是什么？</p><p>JS 运行在浏览器的渲染主线程中，而渲染主线程只有一个，所以 JS 是单线程执行的。这是为了保证页面渲染的可靠性和一致性，防止多个线程同时修改 DOM 引起的问题。而渲染主线程需要做很多工作，比如解析 HTML、解析 CSS、计算样式、布局、执行全局 JS 代码。而在代码执行的过程中，会遇到一些无法立即处理的任务，比如：计时器回调、网络请求完成后需要执行的任务、用户操作后需要执行的任务。如果使用同步的方式，让渲染主线程等待这些任务的执行，就会导致主线程长期处于阻塞状态，从而导致任务队列中很多其他任务无法被执行。这样一来，一方面会导致主线程白白地消耗时间，另一方面也会导致页面无法及时更新，给用户造成卡死现象。而渲染主线程承担着极其重要的工作，无论如何都不能阻塞，所以浏览器采用异步的方式来解决这个问题。当某些任务发生时，比如计时器、网络请求、事件监听，主线程会将任务交给其他线程去处理。当其他线程完成时，会将事先传递的回调函数包装成任务，加入到任务队列的末尾排队，等待主线程调度。在这种异步模式下，浏览器永不阻塞，从而最大程度地保证了单线程的流畅运行。</p></li><li><p>JS 为什么会阻塞页面渲染？</p><p>在浏览器中，GUI 线程负责解析 HTML、CSS 并进行页面的绘制，JS 引擎线程负责执行 JS 代码。由于 GUI 渲染和 JS 执行共享同一个渲染主线程，所以它们是互斥的。当 GUI 渲染线程准备渲染页面时，如果遇到需要执行 JS 的情况，会等待 JS 引擎线程执行完毕后再继续渲染。这期间，渲染主线程处于阻塞状态，页面渲染暂停。</p></li><li><p>任务队列的优先级：</p><p>任务是没有优先级的，在任务队列中先进先出。但是任务队列是有优先级的。根据 W3C 最新解释：每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。浏览器必须准备一个微队列，微队列中的任务优先所有其他任务执行。随着浏览器复杂度急剧提升，W3C 不再使用宏队列的说法。在目前谷歌浏览器的实现中，至少包含了：延时队列，用于存放计时器的回调任务；交互队列，用于存放用户操作后产生的任务；网络队列，用于存放网络请求完成后产生的任务；微队列，也称为 vip 队列，优先级最高。在延时队列、交互队列、网络队列中，交互队列的优先级更高，因为浏览器认为用户的交互更加重要。</p></li><li><p>JS 中的计时器能精确计时吗？</p><p>不能，因为计时器回调需要在任务队列中排队，而在它前面可能有其他任务正在排队，所以需要等待它前面的任务执行完，所以还应该算上它前面那些任务的执行时间。而且，按照 W3C 标准，浏览器实现计时器时，如果嵌套层级超过 5 层，会带有 4 毫秒的最少时间，如果计时时间少于 4 毫秒时，会带来偏差。我们用的计时器函数例如 setTimeout 和 setInterval 其实最终调用的是操作系统的函数，而操作系统的计时函数本身就有少量偏差，并且不同操作系统，它的实现不一样，Windows 和 Mac 就不一样，谷歌浏览器实际上是针对 Windows 和 Mac 都做了不同的实现，调的是不同的函数，所以 JS 的计时器就携带了这些偏差。</p></li><li><p>总结：</p><p>单线程是异步产生的原因。事件循环是异步的实现方式。异步的实现可以解决主线程阻塞的问题，有了异步之后，线程永不阻塞。</p></li></ul><h2 id="取消重复请求" tabindex="-1"><a class="header-anchor" href="#取消重复请求" aria-hidden="true">#</a> 取消重复请求</h2><p>创建一个请求列表，记录正在发送的请求。Key 为请求参数拼接成的字符串标识，Value 为取消请求的方法。</p><p>发送请求时，判断请求列表中是否存在重复请求。如果存在的话，就取消请求列表中的请求，并将它从请求列表中删除；如果不存在，就把当前请求添加到请求列表中。请求发送完成后，将当前请求从请求列表中删除。</p><div class="hint-container tip"><p class="hint-container-title">怎么判断两个请求相同？</p><p>判断它们的请求方式、请求地址、请求头、请求体、携带参数是否一致。</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span> <span class="token class-name">AxiosRequestConfig</span><span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">AxiosResponse</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span>

<span class="token doc-comment comment">/**
 * 请求列表
 * <span class="token keyword">@description</span> 记录正在发送的请求
 */</span>
<span class="token keyword">const</span> requestsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 生成请求标识（请求参数拼接成的字符串）
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>AxiosRequestConfig<span class="token punctuation">}</span> config
 * <span class="token keyword">@description</span> 判断两个请求是否相同，就是判断它们的 请求方式、请求地址、请求头、请求体、携带参数 是否一致
 */</span>
<span class="token keyword">function</span> <span class="token function">getRequestKey</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> config
  <span class="token comment">// 将请求参数拼接成字符串，方便比较</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 添加请求
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>AxiosRequestConfig<span class="token punctuation">}</span> config
 */</span>
<span class="token keyword">function</span> <span class="token function">addRequestKey</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> requestKey <span class="token operator">=</span> <span class="token function">getRequestKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
  config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">axios</span><span class="token punctuation">.</span><span class="token function">CancelToken</span><span class="token punctuation">(</span>cancel <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断请求列表中是否 **不存在** 该请求</span>
    <span class="token comment">// 也就是判断该请求是否 **不是** 重复的请求</span>
    <span class="token comment">// 如果不是重复的请求，就要将它添加到请求列表中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestsMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 向请求列表中添加一个请求，Key 为请求参数拼接成的字符串标识，Value 为取消请求的方法</span>
      requestsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">,</span> cancel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 删除请求
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>AxiosRequestConfig<span class="token punctuation">}</span> config
 */</span>
<span class="token keyword">function</span> <span class="token function">delRequestKey</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> requestKey <span class="token operator">=</span> <span class="token function">getRequestKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
  <span class="token comment">// 判断请求列表中是否存在该请求</span>
  <span class="token comment">// 也就是判断该请求是否是重复的请求</span>
  <span class="token comment">// 如果是重复的请求，就要取消请求列表中的请求，并将它从请求列表中删除</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestsMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cancel <span class="token operator">=</span> requestsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span>
    <span class="token comment">// 取消请求列表中的请求</span>
    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 将请求从请求列表中删除</span>
    requestsMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> token
    
    <span class="token function">delRequestKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token comment">// 检查当前请求是不是重复请求</span>
    <span class="token function">addRequestKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token comment">// 将当前请求添加到请求列表中</span>
    
    <span class="token keyword">return</span> config
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  error <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>ResponseResult<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">delRequestKey</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token comment">// 请求完成，将当前请求从请求列表中删除</span>
    
    <span class="token comment">// ...</span>
    
    <span class="token keyword">return</span> response
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    error<span class="token punctuation">.</span>config <span class="token operator">&amp;&amp;</span> <span class="token function">delRequestKey</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取消上一页请求" tabindex="-1"><a class="header-anchor" href="#取消上一页请求" aria-hidden="true">#</a> 取消上一页请求</h2><p>添加 <code>{requestKey: cancel}</code> 的同时，添加当前页面路径。</p><p>在导航守卫中对请求列表中的所有请求进行判断，如果不是当前页面的请求，就取消该请求，并将其删除。</p>`,10),m=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 请求列表"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" requestsMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 生成请求标识"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getRequestKey"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token operator"},":"),s(" AxiosRequestConfig"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" url"),n("span",{class:"token punctuation"},","),s(" method"),n("span",{class:"token punctuation"},","),s(" params "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(` config
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),s("url"),n("span",{class:"token punctuation"},","),s(" method"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stringify"),n("span",{class:"token punctuation"},"("),s("params"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stringify"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"&"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 添加请求"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"addRequestKey"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token operator"},":"),s(" AxiosRequestConfig"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" requestKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getRequestKey"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token punctuation"},")"),s(`
  config`),n("span",{class:"token punctuation"},"."),s("cancelToken "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"axios"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"CancelToken"),n("span",{class:"token punctuation"},"("),s("cancel "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("requestsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("requestKey"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      requestsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("requestKey"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
        cancel`),n("span",{class:"token punctuation"},","),s(`
        pathname`),n("span",{class:"token operator"},":"),s(" window"),n("span",{class:"token punctuation"},"."),s("location"),n("span",{class:"token punctuation"},"."),s(`pathname
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 删除请求"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"delRequestKey"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token operator"},":"),s(" AxiosRequestConfig"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" requestKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getRequestKey"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("requestsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("requestKey"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" cancel "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" requestsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("requestKey"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"cancel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    requestsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),s("requestKey"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" requestsMap "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"./request"'),s(`

router`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"beforeEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("to"),n("span",{class:"token punctuation"},","),s(" _form"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  requestsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" cancel"),n("span",{class:"token punctuation"},","),s(" pathname "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 如果不是当前页面的请求"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("pathname "),n("span",{class:"token operator"},"!=="),s(" to"),n("span",{class:"token punctuation"},"."),s("path"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// 取消请求"),s(`
      `),n("span",{class:"token function"},"cancel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token comment"},"// 从请求列表中删除"),s(`
      requestsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=i(`<h2 id="无感刷新" tabindex="-1"><a class="header-anchor" href="#无感刷新" aria-hidden="true">#</a> 无感刷新</h2><ul><li><p>需求背景：</p><p>因为项目中是用到了七天免登录的，但是如果只这么做的话，用户每隔七天就要去重新登录一次，这样体验就不是很好。所以使用无感刷新来优化用户的体验，用户只要在七天内登录了，就会一直有最新的 token，一直处于免登录状态。只有超过连续七天没登录，token 才会过期，用户才需要重新登录。</p></li><li><p>具体做法：</p><p>后端会返回两个 token，一个是 Access token，有效期很短，比如半个小时，它是用来请求用户数据的；一个是 Refresh token，有效期较长，比如七天或者半个月，它是用来请求 Access token 的。我们请求数据时，是携带 Access token 发送的，如果发现 Access token 过期了，就需要携带 Refresh token 去请求，服务器会将最新的 Access token 和 Refresh token 都返回，然后携带新的 Access token 重新请求数据。这样就可以实现无感刷新的效果。还需要设置定时刷新，每隔一段时间，去请求一次 Access token，这样确保用户停留在页面的时候，双 token 一直存在。</p></li></ul><h2 id="大屏适配" tabindex="-1"><a class="header-anchor" href="#大屏适配" aria-hidden="true">#</a> 大屏适配</h2><p>通过计算 scale 缩放系数完成适配。</p><p>当屏幕宽高比大于设计图宽高比，说明是宽屏，缩放系数为屏幕高度除以设计图高度；</p><p>当屏幕宽高比小于设计图宽高比，说明是竖屏，缩放系数为屏幕宽度除以设计图宽度。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> draftWidth <span class="token operator">=</span> <span class="token number">1519</span>
  <span class="token keyword">const</span> draftHeight <span class="token operator">=</span> <span class="token number">747</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">resize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> screenWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
    <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> screenHeight <span class="token operator">&gt;</span> draftWidth <span class="token operator">/</span> draftHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scale<span class="token punctuation">.</span>value <span class="token operator">=</span> screenHeight <span class="token operator">/</span> draftHeight
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      scale<span class="token punctuation">.</span>value <span class="token operator">=</span> screenWidth <span class="token operator">/</span> draftWidth
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> resize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> resize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ transform: \`scale(\${scale})\` }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function g(y,q){const o=c("Ts"),l=c("Tabs");return k(),r("div",null,[v,p(l,{id:"94",data:[{id:"<Ts /> request.ts"},{id:"<Ts /> auth.ts"}]},{title0:a(({value:t,isActive:e})=>[p(o),s(" request.ts")]),title1:a(({value:t,isActive:e})=>[p(o),s(" auth.ts")]),tab0:a(({value:t,isActive:e})=>[m]),tab1:a(({value:t,isActive:e})=>[b]),_:1},8,["data"]),f])}const w=u(d,[["render",g],["__file","面试重点.html.vue"]]);export{w as default};

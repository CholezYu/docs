import{_ as n,o as s,c as a,a as t}from"./app-lSCqWAGx.js";const e={},p=t(`<h2 id="vue2-7-存在的问题" tabindex="-1"><a class="header-anchor" href="#vue2-7-存在的问题" aria-hidden="true">#</a> Vue2.7 存在的问题</h2><h3 id="ts-支持不友好" tabindex="-1"><a class="header-anchor" href="#ts-支持不友好" aria-hidden="true">#</a> TS 支持不友好</h3><p>2.7 加入了组合式 API 的写法，同时也支持 TS，但是 2.7 对 TS 的支持并不友好，2.7 不能定义插槽参数的类型，这导致如果直接解构 <code>slotProps</code> 的话，<code>row</code> 的类型为 any，读取 <code>row</code> 中的属性会导致编辑器报错。</p><p>下列代码在 webstorm 中会出现 “未解析的变量 itemTitle” 的报错，虽然运行没有问题，但是很影响开发体验。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ row }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ row.itemTitle }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问路由不方便" tabindex="-1"><a class="header-anchor" href="#访问路由不方便" aria-hidden="true">#</a> 访问路由不方便</h3><p>此外，由于在 2.7 中使用组合式写法，但是 <code>vue-router</code> 又没有提供 <code>useRouter</code> 和 <code>useRoute</code> 这两个 API。</p><p><code>useRouter</code> 我们可以像 Vue2 一样导入 router 对象来使用，但是 <code>useRoute</code> 没有很好的替代品。既失去了 <code>$route</code> 的写法，又不能使用 <code>useRoute</code>，那我们如何获取路由信息呢？</p><p>我们可以使用 <code>getCurrentInstance()</code> 解构出一个 <code>proxy</code> 对象，通过 <code>proxy.$route</code> 可以访问路由信息。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>如果想要观察 route 的变化，必须监听 <code>proxy.$route</code>。</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> watch<span class="token punctuation">,</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 这种方式获取的 route 是一个固定值，它将不会变化</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>proxy<span class="token punctuation">.</span>$route<span class="token operator">!</span>

<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> proxy<span class="token punctuation">.</span>$route<span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以监听 route 的变化</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> route<span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// !!不能监听 route 的变化</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="立即监听导致的引用问题" tabindex="-1"><a class="header-anchor" href="#立即监听导致的引用问题" aria-hidden="true">#</a> 立即监听导致的引用问题</h2><p>在 watch 中使用了后面定义的响应式数据，并开启立即监听，出现 <code>Cannot access &#39;searchForm&#39; before initialization</code> 的报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>

<span class="token function">watch</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> status <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">search</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  immediate<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> searchForm <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* some params */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>status<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">apiSearch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>searchForm<span class="token punctuation">,</span> <span class="token comment">// Cannot access &#39;searchForm&#39; before initialization</span>
    status
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是一个普通数据，就不会出现报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>

<span class="token function">watch</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>searchForm<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  immediate<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> searchForm <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* some params */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论</strong>：开启立即监听时，不能在 watch 中引用定义在其之后的响应式数据，但是可以引用普通数据。</p>`,17),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","解决问题.html.vue"]]);export{r as default};
